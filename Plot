#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import argparse
from enum import Enum
import os.path
import pprint
import sys
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as manimation
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd

def save_figure(fig, filename, dpi):
    """
    save figure to a file

    Args:
        fig: figure object
        filename: outfilename
        dpi: dpi of the figure
    """
    _, ext = filename.rsplit('.', 1)
    fig.savefig(filename, format=ext, dpi=dpi, bbox_inches='tight')
    print('saving to {:s} with {:d} DPI'.format(filename, dpi))

class LayerError(Exception):
    """ layer number error """
    pass


class GcodeType(Enum):
    """ enum of GcodeType """

    FDM_REGULAR = 1
    FDM_STRATASYS = 2
    LPBF = 3

    @classmethod 
    def has_value(cls, value):
        return any(value == item.value for item in cls)


class GcodeReader:
    """ Gcode reader class """

    def __init__(self, filename, filetype=GcodeType.FDM_REGULAR):
        if not os.path.exists(filename):
            print("{} does not exist!".format(filename))
            sys.exit(1)
        self.filename = filename
        self.filetype = filetype
        # print(self.filetype)
        self.n_segs = 0  # number of line segments
        self.segs = None  # list of line segments [(x0, y0, x1, y1, z)]
        self.n_layers = 0  # number of layers
        # seg_index_bars and subpath_index_bars have the same format
        # e.g. ith layer has segment indexes [seg_index_bars[i-1],
        # seg_index_bars[i])
        self.seg_index_bars = []
        self.subpath_index_bars = []
        self.summary = None
        self.lengths = None
        self.subpaths = None
        self.xyzlimits = None
        self.elements = None
        self.elements_index_bars = []
        # read file to populate variables
        self._read()

    def _read(self):
        """
        read the file and populate self.segs, self.n_segs and
        self.seg_index_bars
        """
        if self.filetype == GcodeType.FDM_REGULAR:
            self._read_fdm_regular()
        elif self.filetype == GcodeType.FDM_STRATASYS:
            self._read_fdm_stratasys()
        elif self.filetype == GcodeType.LPBF:
            self._read_lpbf()
        else:
            print("file type is not supported")
            sys.exit(1)


    def _read_fdm_regular(self):
        """ read fDM regular gcode type """
        with open(self.filename) as infile:
            # read nonempty lines
            lines = (line.strip() for line in infile.readlines()
                     if line.strip())
            # only keep line that starts with 'G1'
            lines = (line for line in lines if (line.startswith('G1') and not line.startswith(';')))
        # pp.pprint(lines) # for debug
        self.segs = []
        temp = -float('inf')
        gxyzef = [temp, temp, temp, temp, temp, temp]
        d = dict(zip(['G', 'X', 'Y', 'Z', 'E', 'F'], range(6)))
        seg_count = 0
        for line in lines:
            old_gxyzef = gxyzef[:]
            for token in line.split():
                if token ==';':
                    continue
                gxyzef[d[token[0]]] = float(token[1:])
            if gxyzef[3] > old_gxyzef[3]:  # z value
                self.n_layers += 1
                self.seg_index_bars.append(seg_count)
            if (gxyzef[0] == 1 and gxyzef[1:3] != old_gxyzef[1:3]
                    #and gxyzef[3] == old_gxyzef[3]):
                    and gxyzef[4] != old_gxyzef[4]):
                x0, y0, z = old_gxyzef[1:4]
                x1, y1 = gxyzef[1:3]
                self.segs.append((x0, y0, x1, y1, z))
                seg_count += 1
        self.n_segs = len(self.segs)
        self.segs = np.array(self.segs)
        self.seg_index_bars.append(self.n_segs)
        assert(len(self.seg_index_bars) - self.n_layers == 1)

    def _compute_subpaths(self):
        """ compute subpaths
            a subpath is represented by (xs, ys, zs)
        """
        if not self.subpaths:
            self.subpaths = []
            self.subpath_index_bars = [0]
            x0, y0, x1, y1, z = self.segs[0, :]
            xs, ys, zs = [x0, x1], [y0, y1], [z, z]
            for x0, y0, x1, y1, z in self.segs[1:, :]:
                if x0 != xs[-1] or y0 != ys[-1] or z != zs[-1]:
                    self.subpaths.append((xs, ys, zs))
                    if z != zs[-1]:
                        self.subpath_index_bars.append(len(self.subpaths))
                    xs, ys, zs = [x0, x1], [y0, y1], [z, z]
                else:
                    xs.append(x1)
                    ys.append(y1)
                    zs.append(z)
            if len(xs) >=0:
                self.subpaths.append((xs, ys, zs))
            self.subpath_index_bars.append(len(self.subpaths))

    def plot_layer(self, ax=None):
        """ plot a specific layer in 2D """

        ax=None

        fig, ax = plt.subplots(figsize=(8,8),sharex=True,sharey=True,frameon=False)
        extent = ax.get_window_extent().transformed(fig.dpi_scale_trans.inverted())
        #ax1=fig.add_subplot(211)

        for layer in range(104,self.n_layers+1):

            
            self._compute_subpaths()
            
            left, right = (self.subpath_index_bars[layer - 1], self.subpath_index_bars[layer])

            plt.axis("equal")

            for xs, ys, _ in self.subpaths[left: right]:   
                
                    ax.plot(xs, ys,'k',linewidth=1)
                    ax.set_yticklabels([])
                    ax.set_xticklabels([])
                    plt.xticks([])
                    plt.yticks([])


                    fig.savefig(str(layer)+'.png',dpi=200,bbox_inches=extent,frameon=False)

def command_line_runner():
    """command line runner"""

    filetype=1
    gcode_file="C:/Users/Myuser/Desktop/gcode.gcode"
    

    # 2. handle Gcode file type
    if not GcodeType.has_value(filetype):
        print('Invalid G-code file type: {:d}'.format(filetype))
        print('Valid types are listed below')
        for gcode_type in GcodeType:
            print('{:s} : {:d}'.format(gcode_type.name, gcode_type.value))
        sys.exit(1)
    else:
        filetype = GcodeType(filetype)
    gcode_reader = GcodeReader(filename=gcode_file, filetype=filetype)

    gcode_reader.plot_layer()

if __name__ == "__main__":
    print("Gcode Reader")
    command_line_runner()
